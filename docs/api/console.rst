探索和调试
==============================

..  module:: wxpy

想要做点小试验，调试代码，或是探索 wxpy 的功能特性？反复修改和运行太麻烦。

试试下面两种玩法，告别涂涂改改的摸索方式。


玩法一：使用 `embed()`
------------------------------

..  note:: 适用于在现有的代码中进行探索和调试

只需将 :any:`embed()` 放在代码中的任何位置。运行后，就可以从那儿开始探索和调试。

例如，初始化一个机器人，然后看看它能做些什么::

    from wxpy import *
    robot = Robot()
    embed() # 开始探索调试

    >>> robot
    # Out[1]: <Robot: 游否>
    >>> robot.friends()
    # Out[2]: [<Friend: 路人甲>, <Friend: 路人乙>, <Friend: 路人丙>]

..  autofunction:: embed


玩法二：使用 `wxpy` 命令
------------------------------

..  highlight:: shell

..  note:: 适用于在命令行中边写边探索

有时候想要简单写几行，而不想创建脚本，可以使用 `wxpy` 命令行边写边探索。

在命令行中输入 `wxpy -h` 可快速查看使用说明。


选项
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* robot1 robot2 robot3...
    * 一个或多个需要初始化的机器人对象的名称，以空格分割
    * 默认：不初始化机器人
    * 例子: `r1 r2`

* -c / --cache
    * 使用会话缓存功能，将创建 `wxpy_*.pkl` 缓存文件
    * 默认：不缓存会话
    * 例子：`-c`

* -q 宽度 / --console_qr 宽度
    * 终端二维码的单元格宽度
    * 默认：不使用终端二维码
    * 例子：`-q 2`

* -l 等级 / --logging_level 等级 (注意是小写 L，不是 I)
    * 日志等级
    * 默认：`INFO`
    * 例子：`-l DEBUG`

* -s 交互界面 / --shell 交互界面
    * 选择所需使用的 Python 交互界面
    * 可为：`ipython`，`bpython`，`python`，或它们的首字母
    * 默认：以上首个可用的 Python 命令行
    * 例子：`-s bpython`


例子
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


初始化一个变量名为 `robot` 的机器人::

    wxpy robot

在上述基础上，使用终端二维码，且单元格宽度为 2::

    wxpy robot -q 2

分别初始化变量名为 `r1` 和 `r2` 的两个机器人::

    wxpy r1 r2

在上述基础上，使用会话缓存功能::

    wxpy r1 r2 -c

在上述基础上，指定使用 bpython::

    wxpy r1 r2 -c -s bpython
